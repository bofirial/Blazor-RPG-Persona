@page "/"
@using Newtonsoft.Json
@using TechnologyCharacterGenerator.Child.Common.BusinessLogic
@using __Blazor.TechnologyCharacterGenerator.Child.Common.Models

@inject HttpClient HttpClient
@inject ITechnologyCharacterCreator TechnologyCharacterGenerator

@inject IUserViewModelUpdateReceiver UserViewModelUpdateReceiver
@inject IApplicationNameProvider ApplicationNameProvider
@inject IStatusReportSender StatusReportSender

<h1>Technology Character Generator - @ApplicationName</h1>

<UserForm Id="childUserForm" IsCollapsed="true" bind-Model="@UserViewModel" ModelSubmittedAsync="@GeneratePersonaAsync" ReadOnly="@IsRunningInAnIFrame" />

@if (null != TechnologyCharacterViewModel)
{
    <TechnologyCharacter Model="@TechnologyCharacterViewModel" />
}

@functions {
    UserViewModel UserViewModel { get; set; } = new UserViewModel();

    TechnologyCharacterViewModel TechnologyCharacterViewModel { get; set; }

    string ApplicationName { get; set; }

    bool IsRunningInAnIFrame { get; set; } = false;

    async Task GeneratePersonaAsync(UserViewModel userViewModel)
    {
        TechnologyCharacterViewModel = await Task.Run(() => TechnologyCharacterGenerator.GenerateTechnologyCharacter(userViewModel));

        this.StateHasChanged();

        await StatusReportSender.SendStatusReportAsync(ChildApplicationStatuses.CharacterGenerationCompleted);
    }

    protected override async Task OnInitAsync()
    {
        ApplicationName = await ApplicationNameProvider.GetApplicationNameAsync();

        await JSRuntime.Current.InvokeAsync<object>(
            "setApplicationName", ApplicationName);

        await JSRuntime.Current.InvokeAsync<object>(
            "userViewModelUpdater.init", new DotNetObjectRef(UserViewModelUpdateReceiver));

        IsRunningInAnIFrame = await JSRuntime.Current.InvokeAsync<bool>(
        "parentApplicationManager.applicationIsRunningInAnIFrame");

        UserViewModelUpdateReceiver.UserViewModelUpdated += model =>
        {
            UserViewModel = model;

            this.StateHasChanged();
        };

        UserViewModelUpdateReceiver.UserViewModelSubmitted += async model => await GeneratePersonaAsync(model);

        await StatusReportSender.SendStatusReportAsync(ChildApplicationStatuses.ApplicationLoadCompleted);

        await JSRuntime.Current.InvokeAsync<object>(
            "statusReportSender.prepareCharacterGenerationStartedStatusReport", new ChildApplicationStatusReport()
            {
                ApplicationName = ApplicationName,
                ChildApplicationStatus = ChildApplicationStatuses.CharacterGenerationStarted
            });
    }
}