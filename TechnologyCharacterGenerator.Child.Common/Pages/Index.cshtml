@page "/"
@using Newtonsoft.Json
@using TechnologyCharacterGenerator.Foundation.Models
@using TechnologyCharacterGenerator.Child.Common.BusinessLogic

@inject HttpClient HttpClient
@inject ITechnologyCharacterCreator TechnologyCharacterGenerator
@inject ILogger<Index> Logger

<h1>Technology Character Generator - @ApplicationName</h1>

<UserForm Id="childUserForm" IsCollapsed="false" bind-Model="@UserViewModel" ModelSubmittedAsync="@GeneratePersonaAsync" />
@if (null != TechnologyCharacterViewModel)
{
    <TechnologyCharacter Model="@TechnologyCharacterViewModel" />
}


@functions {
    UserViewModel UserViewModel { get; set; } = new UserViewModel();

    TechnologyCharacterViewModel TechnologyCharacterViewModel { get; set; }

    string ApplicationName { get; set; }

    async Task GeneratePersonaAsync(UserViewModel userViewModel)
    {
        Logger.LogInformation("Generating Persona.");
        TechnologyCharacterViewModel = await Task.Run(() => TechnologyCharacterGenerator.GenerateTechnologyCharacter(userViewModel));

        this.StateHasChanged();
    }

    protected override async Task OnInitAsync()
    {
        var application = await HttpClient.GetJsonAsync<ChildApplicationModel>("application.json");

        Logger.LogInformation($"Application: {JsonConvert.SerializeObject(application)}");
        ApplicationName = application.ApplicationName;
    }
}