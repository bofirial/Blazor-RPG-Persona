@using System.Threading
@using TechnologyCharacterGenerator.Parent.Client.BusinessLogic

@implements IDisposable

@inject IChildApplicationStatusReportReceiver ChildApplicationStatusReportReceiver
@inject ILogger<ChildApplicationStatusLog> Logger

<div class="statusReport form-row">
    @*<DisplayField Label="Application Load Time" Id="@($"applicationLoad-{ApplicationName}")" Value="@ApplicationLoadSeconds" />
        <DisplayField Label="Character Generation Time" Id="@($"characterGeneration-{ApplicationName}")" Value="@CharacterGenerationSeconds" />*@
    @if (!string.IsNullOrEmpty(ApplicationLoadSeconds))
    {
        <h3>@ApplicationLoadSeconds Seconds</h3>
    }
    <h3>Application Load: @Model.ApplicationLoadStartedOn</h3>
</div>


@functions
{
[Parameter]
private string ApplicationName { get; set; }

private ChildApplicationStatusViewModel Model { get; set; }

private string ApplicationLoadSeconds { get; set; }

private string CharacterGenerationSeconds { get; set; }

public Timer Timer { get; set; }

public void ReceiveChildApplicationStatusReport(ChildApplicationStatusReport childApplicationStatusReport)
{
    if (childApplicationStatusReport.ApplicationName != ApplicationName) return;

    switch (childApplicationStatusReport.ChildApplicationStatus)
    {
        case ChildApplicationStatuses.ApplicationLoadStarted:
            Model.ApplicationLoadStartedOn = DateTime.Now;
            Model.ApplicationLoadCompletedOn = default;
            break;
        case ChildApplicationStatuses.ApplicationLoadCompleted:
            Model.ApplicationLoadCompletedOn = DateTime.Now;
            break;
        case ChildApplicationStatuses.CharacterGenerationStarted:
            Model.CharacterGenerationStartedOn = DateTime.Now;
            Model.CharacterGenerationCompletedOn = default;
            break;
        case ChildApplicationStatuses.CharacterGenerationCompleted:
            Model.CharacterGenerationCompletedOn = DateTime.Now;
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }

    //CalculateTimes(null);
}

public void CalculateTimes(object state)
{
    //if (Timer != null)
    //{
    //    Timer?.Dispose();

    //    Timer = null;
    //}

    if (Model.ApplicationLoadStartedOn != default)
    {
        var applicationLoadTarget = Model.ApplicationLoadCompletedOn;

        if (applicationLoadTarget == default)
        {
            applicationLoadTarget = DateTime.Now;

            //Timer = new Timer(CalculateTimes, null, 1000, Timeout.Infinite);
        }

        ApplicationLoadSeconds = GetElapsedSecondsString(Model.ApplicationLoadStartedOn, applicationLoadTarget);
    }

    if (Model.CharacterGenerationStartedOn != default)
    {
        var characterGenerationTarget = Model.CharacterGenerationCompletedOn;

        if (characterGenerationTarget == default)
        {
            characterGenerationTarget = DateTime.Now;

            //Timer = new Timer(CalculateTimes, null, 1000, Timeout.Infinite);
        }

        CharacterGenerationSeconds = GetElapsedSecondsString(Model.CharacterGenerationStartedOn, characterGenerationTarget);
    }

    Logger.LogInformation($"Application Load: {ApplicationLoadSeconds} Model.ApplicationLoadStartedOn: {Model.ApplicationLoadStartedOn} ({ApplicationName})");

    StateHasChanged();
}

public string GetElapsedSecondsString(DateTime from, DateTime to)
{
    return $"{(to - @from).TotalSeconds:0.0}s";
}

protected override void OnInit()
{
    Model = new ChildApplicationStatusViewModel()
    {
        ApplicationName = ApplicationName,
        ApplicationLoadStartedOn = DateTime.Now.AddSeconds(-10)
    };

    Logger.LogInformation($"ChildApplicationStatusReportReceived Event Registered");

    Timer = new Timer(CalculateTimes, null, 0, 100);

    ChildApplicationStatusReportReceiver.ChildApplicationStatusReportReceived += ReceiveChildApplicationStatusReport;
}

protected override bool ShouldRender()
{
    Logger.LogInformation($"ChildApplicationStatusReportReceived ShouldRender - {DateTime.Now}");

    return true;
}

public void Dispose()
{
    if (Timer != null)
    {
        Timer?.Dispose();

        Timer = null;
    }
}
}
