@page "/"
@using TechnologyCharacterGenerator.Parent.Client.BusinessLogic

@inject HttpClient HttpClient
@inject IChildApplicationStatusReportReceiver ChildApplicationStatusReportReceiver

<h1>Technology Character Generator</h1>

<UserForm Id="parentUserForm" IsCollapsed="false" bind-Model="@UserViewModel" ModelSubmittedAsync="@SubmitChildApplicationUserFormsAsync" />

<ol class="list-unstyled d-block d-sm-flex my-3">

    @if (null != ChildApplications)
    {
        foreach (var childApplication in ChildApplications)
        {
            <ChildApplication ChildApplicationName="@childApplication.ApplicationName" ChildApplicationUrl="@childApplication.ApplicationUrl" />
        }
    }
</ol>

@functions
{
    private List<ChildApplicationModel> ChildApplications;

    protected override async Task OnInitAsync()
    {
        ChildApplications = await HttpClient.GetJsonAsync<List<ChildApplicationModel>>("api/child-applications");

        await JSRuntime.Current.InvokeAsync<object>(
            "statusReportSender.init", new DotNetObjectRef(ChildApplicationStatusReportReceiver));
    }

    private UserViewModel _userViewModel = new UserViewModel();
    private UserViewModel UserViewModel
    {
        get => _userViewModel;
        set
        {
            _userViewModel = value;

            JSRuntime.Current.InvokeAsync<object>(
                "childApplicationUserViewModelUpdater.update", value);
        }
    }

    async Task SubmitChildApplicationUserFormsAsync(UserViewModel userViewModel)
    {
        await JSRuntime.Current.InvokeAsync<object>(
            "childApplicationUserViewModelUpdater.submit", userViewModel);
    }
}
