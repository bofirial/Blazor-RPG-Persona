@using TechnologyCharacterGenerator.Foundation.Models

<CollapsiblePanel Id="@Id" Title="User Description" bind-IsCollapsed="@IsCollapsed">
    <form onsubmit="@GeneratePersonaAsync">

        <Field For="@($"{Id}-name")" Label="Name">
            <input type="text" class="form-control" id="@(Id)-name" bind="@Model.Name" placeholder="Enter your name" />
        </Field>

        <Field For="@($"{Id}-month")" Label="Birth Date">
            <div class="row justify-content-between no-gutters">
                <select class="form-control col-5" id="@(Id)-month" bind="@BirthMonthWithChangeEvent">
                    <option selected></option>
                    @foreach (var month in MonthDescription.AllMonths)
                    {
                        <option value="@month.MonthNumber">@month.Month</option>
                    }
                </select>

                <select class="form-control col-5" id="@(Id)-day" bind="@Model.BirthDay" disabled="@(DaysInMonth < 1)">
                    <option selected></option>
                    @for (int i = 1; i <= DaysInMonth; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </Field>

        <Field For="@($"{Id}-favorite")" Label="Favorite Food">
            <input type="text" class="form-control" id="@(Id)-favorite" bind="@Model.FavoriteFood" placeholder="Enter your favorite food" />
        </Field>

        <button type="submit" class="btn btn-primary">Generate Character</button>
    </form>
</CollapsiblePanel>

@functions
{
    [Parameter]
    private UserViewModel Model { get; set; } = new UserViewModel();

    [Parameter]
    private Action<UserViewModel> ModelChanged { get; set; } = (model) => { };

    [Parameter]
    private Func<UserViewModel, Task> ModelSubmittedAsync { get; set; } = (model) => Task.CompletedTask;

    [Parameter]
    private bool IsCollapsed { get; set; } = false;

    [Parameter]
    private Action<bool> IsCollapsedChanged { get; set; } = (isCollapsed) => { };

    [Parameter]
    private string Id { get; set; }

    public int BirthMonthWithChangeEvent
    {
        get => Model.BirthMonth;
        set
        {
            Model.BirthMonth = value;

            MonthChanged();
        }
    }

    public int DaysInMonth { get; set; } = 0;

    public void MonthChanged()
    {
        var month = MonthDescription.AllMonths.FirstOrDefault(m => m.MonthNumber == Model.BirthMonth);

        if (month != default(MonthDescription))
        {
            DaysInMonth = month.DaysInMonth;
        }
        else
        {
            DaysInMonth = 0;
        }
    }

    public async Task GeneratePersonaAsync(UIEventArgs e)
    {
        await ModelSubmittedAsync(Model);
    }
}
